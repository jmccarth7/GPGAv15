module GP_Parameters

implicit none

!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! set the integer parameters for the Lotka Volterra Example
integer (kind=4), parameter :: n_Levels=4
integer (kind=4), parameter :: n_Node_Functions=7              ! number of possible node functions [needed for tree generations/alterations
integer (kind=4), parameter :: n_CODE_Equations=2         ! number of coupled equations
integer (kind=4), parameter :: n_Trees=((n_CODE_Equations+1)**2)-(n_CODE_Equations+1)
integer (kind=4), parameter :: n_Nodes=int(2**n_Levels)-1
integer (kind=4), parameter :: n_Time_Steps=2000     ! 400 days
real (kind=4), dimension(n_Levels), parameter :: Node_Probability = (/0.8,0.6,0.4,0./)  ! NOTE: Last value MUST BE 0.0!!!]
!off character*1, dimension(n_Node_Functions), parameter :: Node_Function_Type = (/'+','-','*','/','e','g','p'/)
!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
! set the integer parameters for the Franks et al. Mar Bio NPZ Example
!off integer (kind=4), parameter :: n_Levels=5
!off integer (kind=4), parameter :: n_Functions=7              ! number of possible node functions [needed for tree generations/alterations
!off integer (kind=4), parameter :: n_CODE_Equations=3         ! number of coupled equations
!off integer (kind=4), parameter :: n_Trees=((n_CODE_Equations+1)**2)-(n_CODE_Equations+1)
!off integer (kind=4), parameter :: n_Nodes=int(2**n_Levels)-1
!off integer (kind=4), parameter :: n_Time_Steps=40*24*60     ! 400 days
!off real (kind=4), dimension(n_Levels), parameter :: Node_Probability = (/0.95,0.4,0.8,0.6,0.0/)
!off character*1, dimension(n_Node_Functions), parameter :: Node_Function_Type = (/'+','-','*','/','e','g','p'/)
!xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

integer (kind=4), parameter :: n_Maximum_Number_Parameters = n_CODE_Equations+n_Nodes
integer (kind=4) :: n_Parameters

! this decides what the tree's shape needs to be like, i.e. bush or logpole pine
! Suggestion: Later this might be modulated with a phase, amplitude, etc. f-n]
! NOTE: the last value must be set to zero to set the last level as terminals only.

! GP routine-specific variables that can be modified
integer (kind=4), parameter :: n_GP_Generations = 1000
integer (kind=4), parameter :: n_GP_Individuals = 10

! GP Probability of a Tree being assigned
!real (kind=4), parameter :: GP_Tree_Probability=0.5 ! Estimated from previous work by Joel Cohen

! Note: The next 4 parameters must add up to 1.0
!real (kind=4), parameter :: GP_Elitist_Probability = 0.1                ! Keeps the top n_GP_Elitists of the Best Fit Individuals from Generation to Generation
!real (kind=4), parameter :: GP_Asexual_Reproduction_Probability = 0.4   ! probability of asexual reproduction
!real (kind=4), parameter :: GP_Crossover_Probability = 0.4              ! probability of sexual crossing of binary string 
!real (kind=4), parameter :: GP_Mutation_Probability = 0.1               ! probability of mutation in binary string

!real (kind=4), parameter :: GP_Set_Terminal_to_Parameter_Probability = 0.6  ! probability of setting a terminal node to a parameter

!off real (kind=8), parameter :: dt = 1.0D+0/(24.0D+0*60.0D+0)   ! [d^-1; 1 minute time step]
!real (kind=8), parameter :: dt = 10.0D+0/(24.0D+0*60.0D+0)   ! [d^-1; 10 minute time step]

end module GP_Parameters
